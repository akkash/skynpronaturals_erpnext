[
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Sales Invoice", 
  "modified": "2017-04-18 12:33:29.044459", 
  "name": "Sales Invoice-Client", 
  "script": "//SPN\n\nfrappe.ui.form.on(\"Sales Invoice\", {\n    \"btn_apply_discount_scheme\": function(frm) {\n        if (!cur_frm.doc.spn_monthly_discount) {\n            frappe.msgprint(\"Please select a discount scheme.\");\n        } else if (cur_frm.doc.items.length == 0){\n            frappe.msgprint(\"Please add items before applying discount scheme.\");\n        } else {\n            var total_qty = 0.0\n            $.each(cur_frm.doc.items, function(k,v) {\n                total_qty += v[\"qty\"];\n            });\n\n            frappe.call({\n                method: \"skynpronaturals_erpnext.api.get_discount_and_freebies\",\n                args: {\n                    discount_scheme: cur_frm.doc.spn_monthly_discount,\n                    total_qty: total_qty,\n                    total_amount: cur_frm.doc.total,\n                    items: cur_frm.doc.items,\n                    company: cur_frm.doc.company\n                },\n                callback: function(r) {\n                    var abbr = frappe.get_abbr(cur_frm.doc.company, cur_frm.doc.company.length);\n\n                    //For item-wise freebies\n                    if (Array.isArray(r.message)) {\n                        console.log(\"For multiple items...\");\n\n                        $.each(r.message, function(idx, dsc_item) {\n                            si_item = cur_frm.doc.items.filter(function(f) { return f[\"item_code\"] == dsc_item[\"item\"]; })\n                            frappe.model.set_value(\"Sales Invoice Item\", si_item[0].name, \"discount_percentage\", dsc_item.discount_pct);\n                            $.each(dsc_item[\"freebies\"], function(i, freebie) {;\n                                add_freebie(abbr, freebie, r.message.income_account, r.message.expense_account);\n                            });\n                        });\n                    } else {\n                        console.log(\"Applying pct\");\n\n                        if (r.message && r.message.discount_pct) {\n                            cur_frm.set_value(\"additional_discount_percentage\", r.message.discount_pct);\n                        }\n\n                        if(r.message && r.message.freebies) {\n                            $.each(r.message.freebies, function(i, freebie) {\n                                add_freebie(abbr, freebie, r.message.income_account, r.message.expense_account);\n                            });\n                        }\n                    }               \n                    cur_frm.refresh_fields();\n                }\n            });\n        }\n    },\n    \"spn_monthly_discount\": function(frm) {\n        frappe.db.get_value(\"SPN Discount Scheme\", cur_frm.doc.spn_monthly_discount, \"item_group\", function(r) {\n            console.log(\"Applying item group filter\")\n            if (r && r.item_group) {\n                console.log(\"Filtering for:\", r.item_group);\n                //Get list of item groups with single-quotes.\n                var retval = r.item_group.trim().split(\",\");\n                var item_groups = []\n                $.each(retval, function(idx, val) {  item_groups.push(val.trim());  });\n\n                cur_frm.set_query(\"item_code\", \"items\", function(doc, cdt, cdn) {\n                    return {\n                        filters: [[\"item_group\", \"in\", item_groups]]\n                    }\n                });\n            }\n        });\n    },\n    \"spn_warehouse\": function(frm) {\n        if(frm.doc.spn_warehouse && frm.doc.territory && frm.doc.customer_group) {\n            items = frm.doc.items;\n            for (var i=0; i <= items.length - 1; i++) {\n                items[i].warehouse = cur_frm.doc.spn_warehouse;\n            }\n        }\n        \n        //Fetch and set letterhead\n        frappe.call({\n            method: \"skynpronaturals_erpnext.api.get_spn_letter_head\",\n            args: {spn_warehouse: frm.doc.spn_warehouse }, \n            callback: function(r) {\n                if (!r.exc) {\n                    cur_frm.set_value(\"letter_head\", r.message);\n                } else {\n                    frappe.msgprint(\"Check letterhead field in selected Warehouse.\")\n                }\n            }\n        });\n        \n        frappe.call({\n            method: \"skynpronaturals_erpnext.api.get_naming_series\",\n            args: { \n             \"spn_warehouse\": frm.doc.spn_warehouse,\n             \"cust_ter\": frm.doc.territory,\n             \"cust_group\": frm.doc.customer_group\n            },\n            callback: function(r){\n                if (r) {\n                    cur_frm.set_value(\"naming_series\", r.message);\n                }\n            }\n        });\n        \n        //Fetch terms by territory and set.\n        frappe.call({\n            method: \"skynpronaturals_erpnext.api.get_terms_by_warehouse_state\",\n            args: { \n             \"spn_warehouse\": frm.doc.spn_warehouse\n            },\n            callback: function(r){\n                if (r) {\n                    cur_frm.set_value(\"tc_name\", r.message);\n                }\n            }\n        });\n    }\n});\n\nfrappe.ui.form.on(\"Sales Invoice Item\", \"item_code\", function(frm, cdt, cdn) {\n    var d = locals[cdt][cdn];\n    d[\"warehouse\"] = cur_frm.doc.spn_warehouse;\n});\n\nfrappe.ui.form.on(\"Sales Invoice\", {\n    refresh: function(frm) {\n    //get_spn_discount();\n    frappe.call({\n        method:\"skynpronaturals_erpnext.api.get_user_field_restrictions\",\n        args:{doctype:cur_frm.doc.doctype},\n        callback: function(r){\n            if(r.message) {\n                apply_restrictions(cur_frm,r.message)\n            }\n        }\n    })  \n    }\n})\n\nfunction apply_restrictions(frm, le_map){\n    le_map = JSON.parse(le_map);   \n    map_keys = Object.keys(le_map);\n\n    if (map_keys) {\n        for (var i=0; i<map_keys.length; i++) {\n            if(cur_frm.fields_dict[map_keys[i]].df.fieldtype == \"Table\"){\n                $.each(le_map[map_keys[i]], function(key, value) {\n                    var field_name = Object.keys(value)[0];\n                    cur_frm.set_query(field_name, map_keys[i], function() {\n                        return {\n                            filters: {\n                              \"name\" : value[field_name]\n                            }\n                        }\n                    });\n                });\n            } else{\n                var filter_value = le_map[map_keys[i]];\n                cur_frm.set_query(map_keys[i], function() {\n                    return {\n                        filters: {\n                          \"name\" : filter_value\n                        }\n                    }\n                });                 \n            }\n        }\n    }        \n}\n\nfunction add_freebie(abbr, freebie, income_account, expense_account){\n    var d = frappe.model.add_child(cur_frm.doc, \"Sales Invoice Item\", \"items\");\n    d.item_code = freebie.freebie_item;\n    d.item_name = freebie.freebie_item;\n    d.description = freebie.freebie_item_name;\n    d.warehouse = cur_frm.doc.spn_warehouse;\n    d.uom = \"Nos\";\n    d.qty = freebie.freebie_qty;\n    d.rate = 0.0;\n    d.income_account = income_account;\n    d.expense_account = expense_account;\n    d.amount = 0.0;\n}\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Purchase Receipt", 
  "modified": "2017-03-26 16:22:52.239711", 
  "name": "Purchase Receipt-Client", 
  "script": "frappe.ui.form.on(\"Purchase Receipt Item\", \"item_code\", function(frm, cdt, cdn) {\n\tvar d = locals[cdt][cdn];\n\td[\"warehouse\"] = cur_frm.doc.spn_warehouse;\n});\n\nfrappe.ui.form.on(\"Purchase Receipt\", \"spn_warehouse\", function(frm) {\n    if(frm.doc.spn_warehouse) {\n        items = frm.doc.items;\n        for (var i=0; i <= items.length - 1; i++) {\n            items[i].warehouse = cur_frm.doc.spn_warehouse;\n        }\n        \n        //Fetch and set letterhead\n        frappe.call({\n            method: \"skynpronaturals_erpnext.api.get_spn_letter_head\",\n            args: {spn_warehouse: frm.doc.spn_warehouse }, \n            callback: function(r) {\n                if (!r.exc) {\n                    cur_frm.set_value(\"letter_head\", r.message);\n                } else {\n                    frappe.msgprint(\"Check letterhead field in selected Warehouse.\")\n                }\n            }\n        });\n    }\n});\n\nfrappe.ui.form.on(\"Purchase Receipt\", {\n\trefresh: function(frm) {\n\t\tfrappe.call({\n\t\t\tmethod:\"skynpronaturals_erpnext.api.get_user_field_restrictions\",\n\t\t\targs:{doctype:cur_frm.doc.doctype},\n\t\t\tcallback: function(r){\n\t\t\t\tif (r.message) {\n\t\t\t\t\tapply_restrictions(cur_frm,r.message)\n\t\t\t\t}\n\t\t\t}\n\t\t})\t\n    }\n})\n\n\nfunction apply_restrictions(frm, le_map){   \n    le_map = JSON.parse(le_map);   \n    map_keys = Object.keys(le_map);\nconsole.log(\"MAP\", le_map);\n    if (map_keys) {\n    \tfor (var i=0; i<map_keys.length; i++) {\n\t      \tif(cur_frm.fields_dict[map_keys[i]].df.fieldtype == \"Table\"){\n\t      \t\t$.each(le_map[map_keys[i]], function(key, value) {\n\t\t      \t\tvar field_name = Object.keys(value)[0];\n\t\t\t\t\tcur_frm.set_query(field_name, map_keys[i], function() {\n\t\t\t            return {\n\t\t\t                filters: {\n\t\t\t                  \"name\" : value[field_name]\n\t\t\t                }\n\t\t\t            }\n\t\t        \t});\n\t      \t\t});\n\t      \t} else{\n\t      \t\tvar filter_value = le_map[map_keys[i]];\n      \t\t\tcur_frm.set_query(map_keys[i], function() {\n\t\t            return {\n\t\t                filters: {\n\t\t                  \"name\" : filter_value\n\t\t                }\n\t\t            }\n\t        \t});\t      \t\t\t\n\t      \t}\n\t    }\n }\n}", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Stock Entry", 
  "modified": "2017-03-26 16:20:57.535694", 
  "name": "Stock Entry-Client", 
  "script": "frappe.ui.form.on(\"Stock Entry\", \"onload\", function(frm) {\n\tfrm.set_df_property(\"spn_to_warehouse\", \"hidden\", 1);\n});\n\nfrappe.ui.form.on(\"Stock Entry\", \"refresh\", function(frm) {\n\t//var condition = (((frm.doc.docstatus == 0)  || frm.doc.__islocal) || frm.doc.spn_linked);\n\tvar condition = (!frm.doc.spn_linked_transit_entry) \n\t\t&& (frm.doc.spn_stock_entry_type == \"Skynpro\") \n\t\t&& (frm.doc.purpose ==\"Material Transfer\") \n\t\t&& ((frm.doc.docstatus == 0) || (frm.doc.__islocal));\n\n\tif (condition) {\n\t\tfrm.add_custom_button(__(\"Set Details from Transit Entry\"), function() {\n\t\t   var p = frappe.prompt([\n\t\t\t\t{\n\t\t\t\t\t'fieldname': 'stock_entry', \n\t\t\t\t\t'fieldtype': 'Link', \n\t\t\t\t\t'options': 'Stock Entry',\n\t\t\t\t\t'label': 'Stock Entry',\n\t\t\t\t\t'get_query': function() {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tfilters: {\"spn_linked_transit_entry\":\"\", \"docstatus\":\"1\"}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tfunction(value){\n\t\t\t\tconsole.log(value);\n\t\t\t\tset_details_from_transit_entry(frm, value[\"stock_entry\"]);\n\t\t\t},\n\t\t\t'Select Transit Entry',\n\t\t\t'Select'\n\t\t\t)\n\t\t});\n\t}\n\tset_transit_warehouse_filter(frm);\n    \n    frappe.call({\n        method:\"skynpronaturals_erpnext.api.get_user_field_restrictions\",\n        args:{ doctype : cur_frm.doc.doctype },\n        callback: function(r){\n        \tconsole.log(\"Restrictions\", r);\n        \tif (r.message) {\n            \tapply_restrictions(cur_frm,r.message)\n        \t}\n        }\n    });\n    \n});\n\n\nfrappe.ui.form.on(\"Stock Entry\", \"spn_to_warehouse\", function(frm) {\n\tif(frm.doc.spn_to_warehouse) {\n\t\titems = frm.doc.items;\n\t\tfor (var i=0; i <= items.length - 1; i++) {\n\t\t\titems[i].spn_t_warehouse = cur_frm.doc.spn_to_warehouse;\n\t\t}\n\t}\n});\n\nfrappe.ui.form.on(\"Stock Entry\", \"from_warehouse\", function(frm) {\n\tif(frm.doc.from_warehouse) {\n\t\tfrappe.call({\n\t\t\tmethod: \"skynpronaturals_erpnext.api.get_spn_letter_head\",\n\t\t\targs: {spn_warehouse: cur_frm.doc.from_warehouse }, \n\t\t\tcallback: function(r) {\n\t\t\t\tif (!r.exc) {\n\t\t\t\t\tcur_frm.set_value(\"letter_head\", r.message);\n\t\t\t\t} else {\n\t\t\t\t\tfrappe.msgprint(\"Check letterhead field in selected Warehouse.\")\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nfrappe.ui.form.on(\"Stock Entry\", \"purpose\", function(frm) {\n\tset_destination_warehouse(frm);\n\tif (cur_frm.doc.purpose == \"Material Transfer\") {\n\t\tcur_frm.set_value(\"spn_stock_entry_type\", \"Skynpro\");\n\t} else {\n\t\tcur_frm.set_value(\"spn_stock_entry_type\", \"Default\");\n\t}\n\tcur_frm.refresh();\n});\n\nfrappe.ui.form.on(\"Stock Entry\", \"spn_stock_entry_type\", function(frm) {\n\tset_destination_warehouse(frm);\n});\n\nfrappe.ui.form.on(\"Stock Entry Detail\", \"spn_qty_lost\", function(frm, cdt, cdn) {\n\trecalculate_item_qty(frm,cdt,cdn);\n});\nfrappe.ui.form.on(\"Stock Entry Detail\", \"spn_rejected_qty\", function(frm, cdt, cdn) {\n\trecalculate_item_qty(frm,cdt,cdn);\n});\n\n//Helpers\nfunction set_destination_warehouse(frm){\n\tif (frm.doc.purpose == \"Material Transfer\") {\n\t\tif (frm.doc.spn_stock_entry_type == \"Skynpro\") {\n\t\t\tfrm.set_df_property(\"spn_to_warehouse\", \"hidden\", 0);\n\t\t\tfrappe.model.get_value(\"SPN Settings\", \"SPN Settings\", \"spn_transit_warehouse\", function(r){                         \n\t\t\t\tcur_frm.set_value(\"to_warehouse\", r.spn_transit_warehouse);\n\t\t\t});\n\t\t} else {\n\t\t\tfrm.set_df_property(\"spn_to_warehouse\", \"hidden\", 1);\n\t\t\tcur_frm.set_value(\"to_warehouse\", \"\");\n\t\t}\n\t} else {\n\t\tfrm.set_df_property(\"spn_to_warehouse\", \"hidden\", 1);\n\t\tcur_frm.set_value(\"to_warehouse\", \"\");\n\t}\n}\n\n//Details from transit entry\nfunction set_details_from_transit_entry(frm, transit_entry_name) {\n\titems = [];\n\tfrappe.call({\n\t\tmethod: \"skynpronaturals_erpnext.api.get_details_from_transit_entry\",\n\t\targs: { \n\t\t\t\"transit_entry_name\" : transit_entry_name \n\t\t},\n\t\tcallback: function(r) {\n\t\t\tconsole.log(\"Details fetched\", r);\n\t\t\t//Set Type\n\t\t\t//cur_frm.set_value(\"purpose\", \"Material Transfer\");\n\t\t\tcur_frm.set_value(\"spn_stock_entry_type\", \"Default\");\n\n\t\t\t//Set Items\n\t\t\tcur_frm.set_value(\"items\", []); //Clear existing items first (blank row/items from prev fetch).\n\t\t\tfor (i=0;i<=r.message.items.length-1; i++) {\n\t\t\t\trow = frappe.model.add_child(cur_frm.doc, \"Stock Entry Detail\", \"items\");\n\t\t\t\trow.item_code = r.message.items[i].item_code;\n\t\t\t\trow.item_name = r.message.items[i].item_name;\n\t\t\t\trow.qty = r.message.items[i].qty;\n\t\t\t\trow.transfer_qty = r.message.items[i].transfer_qty;\n\t\t\t\trow.uom = r.message.items[i].uom;\n\t\t\t\trow.basic_rate = r.message.items[i].basic_rate;\n\t\t\t\trow.basic_amount = r.message.items[i].basic_amount;\n\t\t\t\trow.additional_cost = r.message.items[i].additional_cost;\n\t\t\t\trow.valuation_rate = r.message.items[i].valuation_rate;\n\t\t\t\trow.amount = r.message.items[i].amount;\n\t\t\t\trow.conversion_factor = r.message.items[i].conversion_factor;\n\t\t\t\trow.expense_account = r.message.items[i].expense_account;\n\t\t\t\trow.cost_center = r.message.items[i].cost_center;\n\t\t\t\trefresh_field(\"items\");\n\t\t\t}\n\n\t\t\t//Set Default warehouses here. Cause cascade in items.\n\t\t\tfrappe.model.get_value(\"SPN Settings\", \"SPN Settings\", \"spn_transit_warehouse\", function(rval){                      \n\t\t\t\tcur_frm.set_value(\"from_warehouse\", rval.spn_transit_warehouse);\n\t\t\t});\n\t\t\t\n\t\t\tcur_frm.set_value(\"to_warehouse\", r.message.destination_warehouse);\n\t\t\t\n\t\t\t//Link selected SE to current SE.\n\t\t\tcur_frm.set_value(\"spn_linked_transit_entry\", transit_entry_name);\n\n\t\t\trefresh_field(\"items\");\n\t\t}\n\t});\n}\n\nfunction create_transit_loss_stock_entry_on_submit(frm) {\n\tvar items_with_transit_loss = frm.doc.items.filter(function(i) { i.spn_loss_qty > 0.0 });\n\tif (items_with_transit_loss.length > 0) {\n\t\t//Create transit entry with stock loss\n\t\tfrappe.call({\n\t\t\tmethod: \"refreshednow_erpnext.api.create_transit_loss_stock_entry\",\n\t\t\targs: { \"created_against\" : frm.doc.name },\n\t\t\tcallback: function(r) {\n\t\t\t\tif (!r.exc) {\n\t\t\t\t\tshow_alert(\"Transit loss entry created (\" + r.message + \")\");\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction recalculate_item_qty(frm,cdt,cdn) {\n\tvar d = locals[cdt][cdn];\n\tfrappe.db.get_value(\"Stock Entry Detail\", \n\t\tfilters={\"parent\": cur_frm.doc.spn_linked_transit_entry, \"item_code\": d[\"item_code\"]}, \n\t\tfieldname=\"qty\",\n\t\tfunction(r) {\n\t\t\td[\"qty\"] = r.qty - ( (d[\"spn_rejected_qty\"] || 0.0) + (d[\"spn_qty_lost\"] || 0.0));\n\t\t\trefresh_field(\"items\"); \n\t});\n}\n\n\nfunction set_transit_warehouse_filter(frm) {\n\t//Transit warehouse\n\tfrappe.model.get_value(\"SPN Settings\", \"SPN Settings\", \"spn_transit_warehouse\", function(r){\n\t\tvar r = r; \n\t\tfrm.set_query(\"to_warehouse\", function() {\n\t\t\tif(cur_frm.doc.purpose=\"Material Transfer\" && cur_frm.doc.spn_stock_entry_type == \"Skynpro\") {\n\t\t\t\treturn {\n\t\t\t\t\tquery: \"skynpronaturals_erpnext.api.se_get_allowed_warehouses\",\n\t\t\t\t\tfilters: {\"name\": r.spn_transit_warehouse}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\tquery: \"skynpronaturals_erpnext.api.se_get_allowed_warehouses\"\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction apply_restrictions(frm, le_map){\n    \n    le_map = JSON.parse(le_map);   \n    map_keys = Object.keys(le_map);\n\n    if (map_keys) {\n        for (var i=0; i<map_keys.length; i++) {\n            if(cur_frm.fields_dict[map_keys[i]].df.fieldtype == \"Table\"){\n                $.each(le_map[map_keys[i]], function(key, value) {\n                    var field_name = Object.keys(value)[0];\n                    cur_frm.set_query(field_name, map_keys[i], function() {\n                        return {\n                            filters: {\n                              \"name\" : value[field_name]\n                            }\n                        }\n                    });\n                });\n            } else{\n                var filter_value = le_map[map_keys[i]];\n                cur_frm.set_query(map_keys[i], function() {\n                    return {\n                        filters: {\n                          \"name\" : filter_value\n                        }\n                    }\n                });                 \n            }\n        }\n    }        \n}", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Customer", 
  "modified": "2017-04-14 16:43:42.349465", 
  "name": "Customer-Client", 
  "script": "// Copyright (c) 2016, MN Technique and contributors\n// For license information, please see license.txt\n\nfrappe.ui.form.on('Customer', {\n\tcustomer_group: function(frm) {\n\t\tdistributor_check(frm);\n\t},\n\tterritory: function(frm) {\n\t\tdistributor_check(frm);\t\t\t\t\n\t}\n});\n\nfunction distributor_check(frm) {\n\tif(frm.doc.territory&&frm.doc.customer_group){\n\t\tfrappe.call({\n\t\t\tmethod: \"skynpronaturals_erpnext.api.check_if_distributor\",\n\t\t\targs:{\"dt\":\"Customer\",\"customer_territory\":frm.doc.territory,\"customer_group\":frm.doc.customer_group},\n\t\t\tcallback:function(r){\n\t\t\t\tfrm.doc.naming_series = r.message;\n\t\t\t}\n\t\t});\n\t}\t\n    cur_frm.refresh_fields();\n}", 
  "script_type": "Client"
 }
]